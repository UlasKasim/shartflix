// Mocks generated by Mockito 5.4.5 from annotations
// in shartflix/test/unit/get_movies_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shartflix/core/error/error.dart' as _i5;
import 'package:shartflix/domain/entities/entities.dart' as _i6;
import 'package:shartflix/domain/repositories/movie_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.MovieListEntity>> getMovies(
          {required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
          {#page: page},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.MovieListEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.MovieListEntity>(
          this,
          Invocation.method(
            #getMovies,
            [],
            {#page: page},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.MovieListEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>
      getFavoriteMovies() => (super.noSuchMethod(
            Invocation.method(
              #getFavoriteMovies,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.MovieEntity>>(
              this,
              Invocation.method(
                #getFavoriteMovies,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> toggleFavoriteMovie(
          String? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleFavoriteMovie,
          [movieId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #toggleFavoriteMovie,
            [movieId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
